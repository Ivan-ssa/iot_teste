#include <SPI.h>        // Biblioteca para comunicação SPI (usada pelo RC522)
#include <MFRC522.h>    // Biblioteca para o módulo RFID RC522
#include <WiFi.h>       // Biblioteca para comunicação Wi-Fi no ESP32
#include <HTTPClient.h> // Biblioteca para fazer requisições HTTP

// --- Definições de Pinos ---
#define SS_PIN            21 // Pino conectado ao pino SDA (ou CS) do RC522.
#define RST_PIN           22 // Pino conectado ao pino RST do RC522.
#define LED_INTERNO_ESP32 2  // Pino do LED interno do ESP32 (geralmente GPIO2)

// --- Configurações de Wi-Fi ---
// VOCÊ DEVE SUBSTITUIR ESTES VALORES PELAS SUAS CREDENCIAIS
const char* WIFI_SSID     = "SEU_SSID";
const char* WIFI_PASSWORD = "SUA_SENHA_WIFI";
const int WIFI_CONNECT_TIMEOUT_MS = 20000; // Tempo limite para conexão Wi-Fi (20 segundos)

// --- Configurações da API ---
// CERTIFIQUE-SE DE USAR A URL CORRETA DA SUA API
const char* API_HOST      = "https://iot-teste.onrender.com";
// Se você adicionou o prefixo /api na sua API Node.js, MUDAR AQUI!
const char* API_ENDPOINT  = "/api/tag"; // O endpoint para onde o ESP32 enviará o UID da tag

// --- Variáveis Globais ---
// Cria uma instância do objeto MFRC522, passando os pinos SS e RST.
MFRC522 mfrc522(SS_PIN, RST_PIN);

// --- Funções Auxiliares ---

/**
 * @brief Converte o UID (array de bytes) da tag em uma string hexadecimal.
 * @param uid Ponteiro para o array de bytes do UID.
 * @param uidLength Comprimento do UID.
 * @return String hexadecimal do UID.
 */
String uidToHexString(byte *uid, byte uidLength) {
  String uidString = "";
  for (byte i = 0; i < uidLength; i++) {
    if (uid[i] < 0x10) { // Se o byte for menor que 16 (em hexadecimal), adiciona um '0' na frente
      uidString += "0";
    }
    uidString += String(uid[i], HEX); // Converte o byte para sua representação hexadecimal
  }
  uidString.toUpperCase(); // Converte a string para letras maiúsculas
  return uidString;
}

/**
 * @brief Tenta conectar ao Wi-Fi.
 * @return true se conectado, false caso contrário.
 */
bool connectWiFi() {
  Serial.print("Conectando ao WiFi ");
  Serial.println(WIFI_SSID);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD); // Inicia a conexão Wi-Fi

  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < WIFI_CONNECT_TIMEOUT_MS) {
    delay(500);
    Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi conectado!");
    Serial.print("Endereço IP: ");
    Serial.println(WiFi.localIP());
    return true;
  } else {
    Serial.println("\nFalha na conexão WiFi. Verifique as credenciais e o sinal.");
    return false;
  }
}

/**
 * @brief Envia o UID da tag para a API via HTTP POST.
 * @param tagUID String contendo o UID da tag.
 * @return true se a requisição foi bem-sucedida (código 2xx), false caso contrário.
 */
bool sendTagToAPI(const String& tagUID) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Wi-Fi desconectado. Tentando reconectar...");
    if (!connectWiFi()) {
      Serial.println("Falha ao reconectar Wi-Fi. Não foi possível enviar a tag.");
      return false;
    }
  }

  HTTPClient http; // Cria um objeto HTTPClient
  String serverPath = String(API_HOST) + String(API_ENDPOINT); // Monta a URL completa da API

  Serial.print("Enviando POST para: ");
  Serial.println(serverPath);
  Serial.print("Conteúdo: {\"tagId\":\"");
  Serial.print(tagUID);
  Serial.println("\"}");

  http.begin(serverPath.c_str());
  http.addHeader("Content-Type", "application/json");

  String httpRequestData = "{\"tagId\":\"" + tagUID + "\"}";
  int httpResponseCode = http.POST(httpRequestData);

  if (httpResponseCode > 0) {
    Serial.printf("[HTTP] Código de resposta: %d\n", httpResponseCode);
    String responsePayload = http.getString();
    Serial.println("Resposta da API: " + responsePayload);
    // Considera 200-299 como sucesso
    return httpResponseCode >= 200 && httpResponseCode < 300;
  } else {
    Serial.printf("[HTTP] Erro na requisição: %s\n", http.errorToString(httpResponseCode).c_str());
    // Se o erro for -1 (conexão perdida), tentar reconectar pode ser útil
    if (httpResponseCode == HTTPC_ERROR_CONNECTION_REFUSED || httpResponseCode == HTTPC_ERROR_NOT_CONNECTED) {
       Serial.println("Conexão HTTP perdida ou recusada. Tentando reconectar Wi-Fi para a próxima.");
       WiFi.disconnect(); // Desconecta para forçar uma nova conexão na próxima iteração
    }
    return false;
  }
  http.end(); // Fecha a conexão HTTP e libera os recursos
}

// --- Setup ---
void setup() {
  Serial.begin(115200);
  while (!Serial);

  Serial.println("--- Iniciando Leitor RFID com ESP32 ---");

  // 1. Configura o LED interno do ESP32
  pinMode(LED_INTERNO_ESP32, OUTPUT);
  digitalWrite(LED_INTERNO_ESP32, LOW); // Garante que o LED esteja desligado

  // 2. Conecta ao Wi-Fi na inicialização
  connectWiFi();

  // 3. Inicia a interface SPI e o módulo MFRC522
  SPI.begin();       // Inicia a comunicação SPI
  mfrc522.PCD_Init(); // Inicializa o módulo RC522

  Serial.println("=========================================");
  Serial.println("Aproxime seu cartao ou chaveiro RFID...");
  Serial.println("=========================================");
}

// --- Loop Principal ---
void loop() {
  // Verifica se o Wi-Fi está conectado. Se não, tenta reconectar.
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Wi-Fi desconectado no loop. Tentando reconectar...");
    if (!connectWiFi()) {
      // Se não conseguir reconectar, espera um pouco e tenta novamente
      delay(5000); // Espera 5 segundos antes de tentar novamente
      return;
    }
  }

  // 1. Verifica se há uma nova tag presente OU se consegue ler a serial (UID) da tag.
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
    digitalWrite(LED_INTERNO_ESP32, LOW); // Desliga o LED
    delay(50); // Pequeno atraso para não "martelar" o leitor
    return; // Sai da função loop e tenta novamente
  }

  // 2. Se a tag foi lida com sucesso, acende o LED
  digitalWrite(LED_INTERNO_ESP32, HIGH);

  // 3. Converte o UID da tag para uma string hexadecimal
  String tagUID = uidToHexString(mfrc522.uid.uidByte, mfrc522.uid.size);
  Serial.print("Tag UID lida: ");
  Serial.println(tagUID);

  // 4. Envia o UID da tag para a API
  if (sendTagToAPI(tagUID)) {
    Serial.println("Tag enviada com sucesso para a API!");
  } else {
    Serial.println("Falha ao enviar tag para a API.");
  }

  // 5. Encerra a leitura da tag para evitar leituras múltiplas da mesma tag rapidamente
  mfrc522.PICC_HaltA(); // Coloca o PICC (card) em estado de parada
  mfrc522.PCD_StopCrypto1(); // Encerra a criptografia para leituras subsequentes

  // Pequeno atraso para o LED ficar aceso e para evitar leituras muito rápidas
  delay(1500); // Mantém o LED aceso e evita spamming
}
